{"recipes":[{"name":"default.rb","path":"recipes/default.rb","checksum":"cbee954ac7c010a1078b93486d3ffc78","specificity":"default"}],"definitions":[],"libraries":[{"name":"rbac.rb","path":"libraries/rbac.rb","checksum":"73f02f129b53734251381f2ed2ca27e4","specificity":"default"}],"attributes":[],"files":[],"templates":[],"resources":[{"name":"auth.rb","path":"resources/auth.rb","checksum":"9ecc09799fcd6ff99b1f21ea8516f1a5","specificity":"default"},{"name":"default.rb","path":"resources/default.rb","checksum":"ee37fecfa0d989eaa6a078f474e84bb0","specificity":"default"},{"name":"user.rb","path":"resources/user.rb","checksum":"2897b1744137ea7c2f823a8ec6e9948d","specificity":"default"}],"providers":[{"name":"auth.rb","path":"providers/auth.rb","checksum":"1041d5fdb0d4a7f459e05f9c9113a9be","specificity":"default"},{"name":"default.rb","path":"providers/default.rb","checksum":"01ac0404f4624046c78fe152cb4ec29c","specificity":"default"},{"name":"user.rb","path":"providers/user.rb","checksum":"6c2122d4f84da7a68f038ac05d441cb2","specificity":"default"}],"root_files":[{"name":"metadata.json","path":"metadata.json","checksum":"d893895332d04ce1b3f5c1f7978b9b2c","specificity":"default"},{"name":"metadata.rb","path":"metadata.rb","checksum":"52bc13c23b40c2f95fb7156927d428c7","specificity":"default"},{"name":"README.md","path":"README.md","checksum":"7202c4a79fd6fcdfcb7f5ada47cf0cb9","specificity":"default"}],"cookbook_name":"rbac","metadata":{"name":"rbac","description":"Allows delegation of service management to users with Solaris Role Based Access Control (RBAC)","long_description":"Role based access control\n=========================\n\nSolaris and Illumos provide sophisticated role-based access control for\ndelegating authorizations within the system. Using RBAC, users can be\ngiven permissions to manage and update services without sudo.\n\nThis cookbook provides chef with LWRPs to manage RBAC and grant permissions.\n\nAt this time this cookbook ONLY manages SMF-related permissions (ie, ability\nof non-priviliged users to start/stop SMF services), but in the future it may\nbe enhanced to support arbitrary Solaris permissions.\n\n## Installation\n\nIn order to add the RBAC LWRPs to a chef run, add the following recipe \nto the run_list:\n\n    rbac::default\n\nThis will do no work, but will load the providers.\n\n## LWRPs\n\n### rbac\n\nDefines a set of authorizations that can be applied to SMF services and\nauthorized to users, without actually applying them to users.\n\nActions:\n  * create (default)\n\nAttributes:\n  * name\n\nExample:\n\n```ruby\nrbac \"nginx\" do\n  action :create\nend\n```\n\nThis will update the authorizations file at `/etc/security/auth_attr`\nwith the following lines:\n\n```\nsolaris.smf.manage.nginx:::Manage nginx Service States::\nsolaris.smf.value.nginx:::Change value of nginx Service::\n```\n\nUsers who are given these authorizations can change properties of the\nservice as well as change its state (i.e. `svcadm disable|enable|restart|clear service`\n\n### rbac_auth\n\nAdds the rbac definition created by `auth` to the user `name`.\n\nActions:\n  * add (default)\n\nAttributes:\n  * name - for descriptive purposes and to ensure that each LWRP call is uniquely\n           identified in the chef run\n  * user\n  * auth\n\nExample:\n\n```ruby\nrbac_auth \"add nginx management permissions to my_user\" do\n  user \"my_user\"\n  auth \"nginx\"\nend\n```\n\nThis adds both manage and value auths to user `my_user`.\n\n## TODO\n\n* separate manage auth from value auth\n* ability to delete all rbac attributes\n","maintainer":"Eric Saxby","maintainer_email":"sax@livinginthepast.org","license":"MIT","platforms":{"solaris2":">= 0.0.0","smartos":">= 0.0.0"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{"rbac":">= 0.0.0"},"replacing":{},"attributes":{},"groupings":{},"recipes":{"rbac":""},"version":"1.0.3"},"version":"1.0.3","name":"rbac-1.0.3","frozen?":false,"chef_type":"cookbook_version","json_class":"Chef::CookbookVersion"}